edgeware-build-spec 3.3.5
Build a chain specification

USAGE:
    edgeware build-spec [FLAGS] [OPTIONS]

FLAGS:
        --dev                         
            Specify the development chain

        --disable-default-bootnode    
            Disable adding the default bootnode to the specification.
            
            By default the `/ip4/127.0.0.1/tcp/30333/p2p/NODE_PEER_ID` bootnode is added to the specification when no
            bootnode exists.
        --disable-log-color           
            Disable log color output

        --disable-log-reloading       
            Disable feature to dynamically update and reload the log filter.
            
            By default this feature is enabled, however it leads to a small performance decrease. The
            `system_addLogFilter` and `system_resetLogFilter` RPCs will have no effect with this option set.
    -h, --help                        
            Prints help information

        --raw                         
            Force raw genesis storage output

    -V, --version                     
            Prints version information


OPTIONS:
    -d, --base-path <PATH>               
            Specify custom base path

        --chain <CHAIN_SPEC>             
            Specify the chain specification.
            
            It can be one of the predefined ones (dev, local, or staging) or it can be a path to a file with the
            chainspec (such as one exported by the `build-spec` subcommand).
    -l, --log <LOG_PATTERN>...           
            Sets a custom logging filter. Syntax is <target>=<level>, e.g. -lsync=debug.
            
            Log levels (least to most verbose) are error, warn, info, debug, and trace. By default, all targets log
            `info`. The global log level can be set with -l<level>.
        --node-key <KEY>                 
            The secret key to use for libp2p networking.
            
            The value is a string that is parsed according to the choice of `--node-key-type` as follows:
            
            `ed25519`: The value is parsed as a hex-encoded Ed25519 32 byte secret key, i.e. 64 hex characters.
            
            The value of this option takes precedence over `--node-key-file`.
            
            WARNING: Secrets provided as command-line arguments are easily exposed. Use of this option should be limited
            to development and testing. To use an externally managed secret key, use `--node-key-file` instead.
        --node-key-file <FILE>           
            The file from which to read the node's secret key to use for libp2p networking.
            
            The contents of the file are parsed according to the choice of `--node-key-type` as follows:
            
            `ed25519`: The file must contain an unencoded 32 byte or hex encoded Ed25519 secret key.
            
            If the file does not exist, it is created with a newly generated secret key of the chosen type.
        --node-key-type <TYPE>           
            The type of secret key to use for libp2p networking.
            
            The secret key of the node is obtained as follows:
            
            * If the `--node-key` option is given, the value is parsed as a secret key according to the type. See the
            documentation for `--node-key`.
            
            * If the `--node-key-file` option is given, the secret key is read from the specified file. See the
            documentation for `--node-key-file`.
            
            * Otherwise, the secret key is read from a file with a predetermined, type-specific name from the chain-
            specific network config directory inside the base directory specified by `--base-dir`. If this file
            does not exist, it is created with a newly generated secret key of the chosen type.
            
            The node's secret key determines the corresponding public key and hence the node's peer ID in the context of
            libp2p. [default: Ed25519]  [possible values: Ed25519]
        --tracing-receiver <RECEIVER>    
            Receiver to process tracing messages [default: Log]  [possible values: Log]

        --tracing-targets <TARGETS>      
            Sets a custom profiling filter. Syntax is the same as for logging: <target>=<level>

